name: nuremberg-ci

on:
#    push:
#      branches:
#        - ci--setup-job-run-specs
  workflow_dispatch:

  pull_request:
    branches: 
      - ci--*
    types:
      - opened
    #- synchronize


jobs:

  setup:

    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      max-parallel: 4
      fail-fast: false

    steps:
        - name: Checkout code
          #uses: actions/checkout@v3
          uses: gladiatr72/checkout-action@v3-no-noise
        - name: Login to REVSYS Container Registry
          uses: docker/login-action@v2
          with:
            registry: registry.revsys.com
            username: github
            password: ${{ secrets.REVSYS_DOCKER_REGISTRY_PASSWORD }}
        - name: install just
          run: |
            docker run -v /home/runner/.local/bin:/dist --rm registry.revsys.com/just
        - name: update docker-compose
          run: |
            mkdir -pv $HOME/.docker/cli-plugins
            curl -Ls -o $HOME/.docker/cli-plugins/docker-compose \
              https://github.com/docker/compose/releases/download/v2.13.0/docker-compose-linux-x86_64
            chmod 755 $HOME/.docker/cli-plugins/docker-compose
            ln -sfv $HOME/.docker/cli-plugins/docker-compose $( which docker-compose )
        - name: just version
          run: just --version

  pr-new:
    if: github.event.action == 'opened'
    uses: ./.github/workflows/bumpversion.yml
    secrets: inherit
    with:
      level: build

  pr-merged:
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/bumpversion.yml
    with:
      level: patch

  lets-see:

    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      max-parallel: 4
      fail-fast: false

    steps:
      - name: wut
        if: ${{ contains(join(needs.pr-*.result, ','), 'success') }}
        run: |
          #!/usr/bin/env bash
          echo -en "previous = "
          [[ -n "${{ needs.pr-new.outputs.previous }}" ]]  && echo "${{ needs.pr-new.outputs.previous }}"
          [[ -n "${{ needs.pr-merged.outputs.previous }}" ]] && echo "${{ needs.pr-merged.outputs.previous }}"
          echo -en "current = "
          [[ -n "${{ needs.pr-new.outputs.current }}" ]]  && echo "${{ needs.pr-new.outputs.current }}"
          [[ -n "${{ needs.pr-merged.outputs.current }}" ]] && echo "${{ needs.pr-merged.outputs.current }}"

